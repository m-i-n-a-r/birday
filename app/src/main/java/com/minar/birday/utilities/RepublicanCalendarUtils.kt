package com.minar.birday.utilities

import android.content.Context
import com.minar.birday.R
import java.time.LocalDate
import kotlin.math.absoluteValue

// This implementation is based on the following rules (translated from French):
// ```
// Article 1. The era of the French begins with the foundation of the republic, which took place on September 22, 1792, in the vulgar era, the day the sun reached the true autumn equinox, entering the sign of Libra at 9 hours, 18 minutes, and 30 seconds in the morning for the Paris Observatory.
// 
// II. The vulgar era is abolished for civil purposes.
// 
// III. Each year begins at midnight, on the day when the true autumn equinox falls for the Paris Observatory.
// 
// IV. The first year of the French Republic began at midnight on September 22, 1792, and ended at midnight, separating September 21 from September 22, 1793.
// 
// V. The second year began on September 22, 1793, at midnight, the true autumn equinox having occurred that day, for the Paris Observatory, at 3:11:38 PM.
// 
// VI. The decree establishing the start of the second year on January 1, 1793, is repealed; all acts dated in the second year of the Republic, occurring between January 1 and September 21 inclusive, are considered part of the first year of the Republic.
// 
// VII. The year is divided into twelve equal months, each with thirty days; after the twelve months, five days follow to complete the ordinary year; these 5 days do not belong to any month.
// 
// VIII. Each month is divided into three equal parts of ten days each, called decades.
// 
// IX. The names of the days of the decade are:
// Primedi, Duodi, Tridi, Quartidi, Quintidi, Sextidi, Septidi, Octidi, Nonidi, Décadi.
//
// The names of the months are:
// For Autumn: Vendémiaire, Brumaire, Frimaire;
// For Winter: Nivôse, Pluviôse, Ventôse;
// For Spring: Germinal, Floréal, Prairial;
// For Summer: Messidor, Thermidor, Fructidor.
// 
// The last five days are called the Sansculotides.
// 
// X. The ordinary year receives an additional day, depending on the position of the equinox, to maintain the coincidence of the civil year with celestial movements. This day, called the Revolution Day, is placed at the end of the year and forms the sixth of the Sansculotides. The period of four years, at the end of which this addition of a day is usually necessary, is called the Franciade, in memory of the revolution that, after four years of efforts, led France to republican government. The fourth year of the Franciade is called Sextile.
// 
// XI. The day, from midnight to midnight, is divided into 10 parts or hours, each part into ten others; and so on to the smallest measurable portion of time. The 100th part of the hour is called a decimal minute; the 100th part of the minute is called a decimal second. This article shall be enforceable for public acts starting from Vendémiaire 1, year three of the Republic.
// 
// XII. The Public Instruction Committee is responsible for printing the new calendar in various formats, along with a simple instruction to explain its principles and usage.
// 
// XIII. The calendar, along with the instruction, will be sent to administrative bodies, municipalities, courts, justices of the peace, and all public officers, armies, popular societies, and all colleges and schools. The provisional executive council shall send it to ministers, consuls, and other agents of France in foreign countries.
// 
// XIV. All public acts shall be dated according to the new organization of the year.
// 
// XV. Professors, instructors, parents, and all those who oversee children's education shall promptly explain the new calendar to them, following the attached instruction.
// 
// XVI. Every four years, or every Franciade, on the day of the revolution, republican games shall be celebrated in memory of the French Revolution.
// ```
//
// The contradiction between articles III and IX is resolved by prioritizing article III, as decided in year 79 by the Commune de Paris. Indeed, a year isn't exactly 365.25 days long, so Franciades will not always be 365*4+1 days long.
// Also as a reminder: Romme's WIP reform was never adopted. It wasn't a good idea anyway. This implementation ignores the proposed the reform.
// 
// # 0-prefixed variables
//  
// Some integer values of the republican calendar are defined on ℕ* (the set of non-zero natural numbers)
// For instance, there is no year 0, no month 0 and no day 0.
// The year going from -1 to 1 complexifies the code.
// This implementation simplifies this by shifting all positive values by 1, so that 0 is a valid value.
// The shifted variables are suffixed with 0.

// This array contains the precise republican timestamps (divided by 10^5) for all years from 1583 to 2999 (gregorian)
// It was automatically generated by this code: https://github.com/Mubelotix/calendrier/blob/master/build.rs
// The data is from the Paris Observatory, which is the official authoritative source for the French Republican Calendar.
val YEAR_STARTS = intArrayOf(-76336, -75970, -75605, -75240, -74875, -74510, -74144, -73779, -73414, -73049, -72683, -72318, -71953, -71588, -71222, -70857, -70492, -70127, -69761, -69396, -69031, -68666, -68300, -67935, -67570, -67205, -66839, -66474, -66109, -65744, -65378, -65013, -64648, -64283, -63917, -63552, -63187, -62822, -62457, -62091, -61726, -61361, -60996, -60630, -60265, -59900, -59535, -59169, -58804, -58439, -58074, -57708, -57343, -56978, -56613, -56247, -55882, -55517, -55152, -54786, -54421, -54056, -53691, -53325, -52960, -52595, -52230, -51864, -51499, -51134, -50769, -50404, -50038, -49673, -49308, -48943, -48577, -48212, -47847, -47482, -47116, -46751, -46386, -46021, -45655, -45290, -44925, -44560, -44194, -43829, -43464, -43099, -42733, -42368, -42003, -41638, -41272, -40907, -40542, -40177, -39812, -39446, -39081, -38716, -38351, -37985, -37620, -37255, -36890, -36524, -36159, -35794, -35429, -35063, -34698, -34333, -33968, -33602, -33237, -32872, -32507, -32141, -31776, -31411, -31046, -30680, -30315, -29950, -29585, -29219, -28854, -28489, -28124, -27759, -27393, -27028, -26663, -26298, -25932, -25567, -25202, -24837, -24471, -24106, -23741, -23376, -23010, -22645, -22280, -21915, -21549, -21184, -20819, -20454, -20088, -19723, -19358, -18993, -18627, -18262, -17897, -17532, -17166, -16801, -16436, -16071, -15706, -15340, -14975, -14610, -14245, -13879, -13514, -13149, -12784, -12418, -12053, -11688, -11323, -10957, -10592, -10227, -9862, -9496, -9131, -8766, -8401, -8035, -7670, -7305, -6940, -6574, -6209, -5844, -5479, -5113, -4748, -4383, -4018, -3653, -3287, -2922, -2557, -2192, -1826, -1461, -1096, -731, -365, 0, 365, 730, 1096, 1461, 1826, 2191, 2557, 2922, 3287, 3652, 4018, 4383, 4748, 5113, 5479, 5844, 6209, 6574, 6939, 7305, 7670, 8035, 8400, 8766, 9131, 9496, 9861, 10227, 10592, 10957, 11322, 11688, 12053, 12418, 12783, 13149, 13514, 13879, 14244, 14610, 14975, 15340, 15705, 16071, 16436, 16801, 17166, 17532, 17897, 18262, 18627, 18992, 19358, 19723, 20088, 20453, 20819, 21184, 21549, 21914, 22280, 22645, 23010, 23375, 23741, 24106, 24471, 24836, 25202, 25567, 25932, 26297, 26663, 27028, 27393, 27758, 28124, 28489, 28854, 29219, 29584, 29950, 30315, 30680, 31045, 31411, 31776, 32141, 32506, 32872, 33237, 33602, 33967, 34333, 34698, 35063, 35428, 35794, 36159, 36524, 36889, 37255, 37620, 37985, 38350, 38716, 39081, 39446, 39811, 40177, 40542, 40907, 41272, 41637, 42003, 42368, 42733, 43098, 43464, 43829, 44194, 44559, 44925, 45290, 45655, 46020, 46386, 46751, 47116, 47481, 47847, 48212, 48577, 48942, 49308, 49673, 50038, 50403, 50769, 51134, 51499, 51864, 52229, 52595, 52960, 53325, 53690, 54056, 54421, 54786, 55151, 55517, 55882, 56247, 56612, 56978, 57343, 57708, 58073, 58439, 58804, 59169, 59534, 59900, 60265, 60630, 60995, 61361, 61726, 62091, 62456, 62822, 63187, 63552, 63917, 64282, 64648, 65013, 65378, 65743, 66109, 66474, 66839, 67204, 67570, 67935, 68300, 68665, 69031, 69396, 69761, 70126, 70492, 70857, 71222, 71587, 71953, 72318, 72683, 73048, 73414, 73779, 74144, 74509, 74875, 75240, 75605, 75970, 76335, 76701, 77066, 77431, 77796, 78162, 78527, 78892, 79257, 79623, 79988, 80353, 80718, 81084, 81449, 81814, 82179, 82545, 82910, 83275, 83640, 84006, 84371, 84736, 85101, 85467, 85832, 86197, 86562, 86927, 87293, 87658, 88023, 88388, 88754, 89119, 89484, 89849, 90215, 90580, 90945, 91310, 91676, 92041, 92406, 92771, 93137, 93502, 93867, 94232, 94598, 94963, 95328, 95693, 96059, 96424, 96789, 97154, 97520, 97885, 98250, 98615, 98980, 99346, 99711, 100076, 100441, 100807, 101172, 101537, 101902, 102268, 102633, 102998, 103363, 103729, 104094, 104459, 104824, 105190, 105555, 105920, 106285, 106651, 107016, 107381, 107746, 108112, 108477, 108842, 109207, 109572, 109938, 110303, 110668, 111033, 111399, 111764, 112129, 112494, 112860, 113225, 113590, 113955, 114321, 114686, 115051, 115416, 115782, 116147, 116512, 116877, 117243, 117608, 117973, 118338, 118704, 119069, 119434, 119799, 120165, 120530, 120895, 121260, 121625, 121991, 122356, 122721, 123086, 123452, 123817, 124182, 124547, 124913, 125278, 125643, 126008, 126374, 126739, 127104, 127469, 127835, 128200, 128565, 128930, 129296, 129661, 130026, 130391, 130757, 131122, 131487, 131852, 132217, 132583, 132948, 133313, 133678, 134044, 134409, 134774, 135139, 135505, 135870, 136235, 136600, 136966, 137331, 137696, 138061, 138427, 138792, 139157, 139522, 139888, 140253, 140618, 140983, 141349, 141714, 142079, 142444, 142810, 143175, 143540, 143905, 144270, 144636, 145001, 145366, 145731, 146097, 146462, 146827, 147192, 147558, 147923, 148288, 148653, 149019, 149384, 149749, 150114, 150480, 150845, 151210, 151575, 151941, 152306, 152671, 153036, 153402, 153767, 154132, 154497, 154862, 155228, 155593, 155958, 156323, 156689, 157054, 157419, 157784, 158150, 158515, 158880, 159245, 159611, 159976, 160341, 160706, 161072, 161437, 161802, 162167, 162533, 162898, 163263, 163628, 163994, 164359, 164724, 165089, 165455, 165820, 166185, 166550, 166915, 167281, 167646, 168011, 168376, 168742, 169107, 169472, 169837, 170203, 170568, 170933, 171298, 171664, 172029, 172394, 172759, 173125, 173490, 173855, 174220, 174586, 174951, 175316, 175681, 176047, 176412, 176777, 177142, 177508, 177873, 178238, 178603, 178968, 179334, 179699, 180064, 180429, 180795, 181160, 181525, 181890, 182256, 182621, 182986, 183351, 183717, 184082, 184447, 184812, 185178, 185543, 185908, 186273, 186639, 187004, 187369, 187734, 188100, 188465, 188830, 189195, 189560, 189926, 190291, 190656, 191021, 191387, 191752, 192117, 192482, 192848, 193213, 193578, 193943, 194309, 194674, 195039, 195404, 195770, 196135, 196500, 196865, 197231, 197596, 197961, 198326, 198692, 199057, 199422, 199787, 200152, 200518, 200883, 201248, 201613, 201979, 202344, 202709, 203074, 203440, 203805, 204170, 204535, 204901, 205266, 205631, 205996, 206362, 206727, 207092, 207457, 207823, 208188, 208553, 208918, 209284, 209649, 210014, 210379, 210745, 211110, 211475, 211840, 212205, 212571, 212936, 213301, 213666, 214032, 214397, 214762, 215127, 215493, 215858, 216223, 216588, 216954, 217319, 217684, 218049, 218415, 218780, 219145, 219510, 219876, 220241, 220606, 220971, 221337, 221702, 222067, 222432, 222797, 223163, 223528, 223893, 224258, 224624, 224989, 225354, 225719, 226085, 226450, 226815, 227180, 227546, 227911, 228276, 228641, 229007, 229372, 229737, 230102, 230468, 230833, 231198, 231563, 231929, 232294, 232659, 233024, 233390, 233755, 234120, 234485, 234850, 235216, 235581, 235946, 236311, 236677, 237042, 237407, 237772, 238138, 238503, 238868, 239233, 239599, 239964, 240329, 240694, 241060, 241425, 241790, 242155, 242521, 242886, 243251, 243616, 243982, 244347, 244712, 245077, 245442, 245808, 246173, 246538, 246903, 247269, 247634, 247999, 248364, 248730, 249095, 249460, 249825, 250191, 250556, 250921, 251286, 251652, 252017, 252382, 252747, 253113, 253478, 253843, 254208, 254574, 254939, 255304, 255669, 256034, 256400, 256765, 257130, 257495, 257861, 258226, 258591, 258956, 259322, 259687, 260052, 260417, 260783, 261148, 261513, 261878, 262244, 262609, 262974, 263339, 263705, 264070, 264435, 264800, 265166, 265531, 265896, 266261, 266627, 266992, 267357, 267722, 268087, 268453, 268818, 269183, 269548, 269914, 270279, 270644, 271009, 271375, 271740, 272105, 272470, 272836, 273201, 273566, 273931, 274297, 274662, 275027, 275392, 275758, 276123, 276488, 276853, 277219, 277584, 277949, 278314, 278679, 279045, 279410, 279775, 280140, 280506, 280871, 281236, 281601, 281967, 282332, 282697, 283062, 283428, 283793, 284158, 284523, 284889, 285254, 285619, 285984, 286350, 286715, 287080, 287445, 287811, 288176, 288541, 288906, 289272, 289637, 290002, 290367, 290732, 291098, 291463, 291828, 292193, 292559, 292924, 293289, 293654, 294020, 294385, 294750, 295115, 295481, 295846, 296211, 296576, 296942, 297307, 297672, 298037, 298403, 298768, 299133, 299498, 299864, 300229, 300594, 300959, 301324, 301690, 302055, 302420, 302785, 303151, 303516, 303881, 304246, 304612, 304977, 305342, 305707, 306073, 306438, 306803, 307168, 307534, 307899, 308264, 308629, 308995, 309360, 309725, 310090, 310456, 310821, 311186, 311551, 311917, 312282, 312647, 313012, 313377, 313743, 314108, 314473, 314838, 315204, 315569, 315934, 316299, 316665, 317030, 317395, 317760, 318126, 318491, 318856, 319221, 319587, 319952, 320317, 320682, 321048, 321413, 321778, 322143, 322509, 322874, 323239, 323604, 323969, 324335, 324700, 325065, 325430, 325796, 326161, 326526, 326891, 327257, 327622, 327987, 328352, 328718, 329083, 329448, 329813, 330179, 330544, 330909, 331274, 331640, 332005, 332370, 332735, 333101, 333466, 333831, 334196, 334561, 334927, 335292, 335657, 336022, 336388, 336753, 337118, 337483, 337849, 338214, 338579, 338944, 339310, 339675, 340040, 340405, 340771, 341136, 341501, 341866, 342232, 342597, 342962, 343327, 343693, 344058, 344423, 344788, 345153, 345519, 345884, 346249, 346614, 346980, 347345, 347710, 348075, 348441, 348806, 349171, 349536, 349902, 350267, 350632, 350997, 351363, 351728, 352093, 352458, 352824, 353189, 353554, 353919, 354285, 354650, 355015, 355380, 355746, 356111, 356476, 356841, 357206, 357572, 357937, 358302, 358667, 359033, 359398, 359763, 360128, 360494, 360859, 361224, 361589, 361955, 362320, 362685, 363050, 363416, 363781, 364146, 364511, 364877, 365242, 365607, 365972, 366338, 366703, 367068, 367433, 367798, 368164, 368529, 368894, 369259, 369625, 369990, 370355, 370720, 371086, 371451, 371816, 372181, 372547, 372912, 373277, 373642, 374008, 374373, 374738, 375103, 375469, 375834, 376199, 376564, 376930, 377295, 377660, 378025, 378391, 378756, 379121, 379486, 379851, 380217, 380582, 380947, 381312, 381678, 382043, 382408, 382773, 383139, 383504, 383869, 384234, 384600, 384965, 385330, 385695, 386061, 386426, 386791, 387156, 387522, 387887, 388252, 388617, 388983, 389348, 389713, 390078, 390443, 390809, 391174, 391539, 391904, 392270, 392635, 393000, 393365, 393731, 394096, 394461, 394826, 395192, 395557, 395922, 396287, 396653, 397018, 397383, 397748, 398114, 398479, 398844, 399209, 399575, 399940, 400305, 400670, 401035, 401401, 401766, 402131, 402496, 402862, 403227, 403592, 403957, 404323, 404688, 405053, 405418, 405784, 406149, 406514, 406879, 407245, 407610, 407975, 408340, 408706, 409071, 409436, 409801, 410167, 410532, 410897, 411262, 411628, 411993, 412358, 412723, 413088, 413454, 413819, 414184, 414549, 414915, 415280, 415645, 416010, 416376, 416741, 417106, 417471, 417837, 418202, 418567, 418932, 419298, 419663, 420028, 420393, 420759, 421124, 421489, 421854, 422220, 422585, 422950, 423315, 423680, 424046, 424411, 424776, 425141, 425507, 425872, 426237, 426602, 426968, 427333, 427698, 428063, 428429, 428794, 429159, 429524, 429890, 430255, 430620, 430985, 431351, 431716, 432081, 432446, 432812, 433177, 433542, 433907, 434272, 434638, 435003, 435368, 435733, 436099, 436464, 436829, 437194, 437560, 437925, 438290, 438655, 439021, 439386, 439751, 440116, 440482, 440847)

// Returns the start of the year in republican timestamp.
// Returns an estimate if the precise value is not known.
fun getYearStart0(republicanYear0: Int): Long {
    val index = republicanYear0 + 209
    if (index >= YEAR_STARTS.size) {
        // Year is after 2999 gregorian (1208 republican), so try to estimate the number of days since 1208
        val sextileYearsSince1208 = (republicanYear0 + 1 - 1208) / 4
        val standardYearsSince1208 = republicanYear0 + 1 - 1208 - sextileYearsSince1208
        val daysSince1208 = sextileYearsSince1208 * 366 + standardYearsSince1208 * 365
        val dayStart = getYearStart0(1208-1) + daysSince1208 * REPUBLICAN_SECONDS_PER_DAY
        return dayStart
    } else if (index < 0) {
        // Year is before 1583 gregorian (-210 republican), so try to estimate the number of days before -210
        val sextileYearsSinceM210 = -(republicanYear0 + 210) / 4
        val standardYearsSinceM210 = -(republicanYear0 + 210) - sextileYearsSinceM210
        val daysSinceM210 = sextileYearsSinceM210 * 366 + standardYearsSinceM210 * 365
        val dayStart = getYearStart0(-209) - (daysSinceM210 + 366) * REPUBLICAN_SECONDS_PER_DAY
        return dayStart
    } else {
        return YEAR_STARTS[index].toLong() * REPUBLICAN_SECONDS_PER_DAY
    }
}

// This array stores whether a year is sextile for all years from 1583 to 2999 (gregorian)
// Sextile years are years that have 366 days instead of 365. Unfortunately, the rule is not as simple as "every 4 years" and can only be determined from the sun's position.
// It was automatically generated by this code: https://github.com/Mubelotix/calendrier/blob/master/build.rs
// The data is from the Paris Observatory, which is the official authoritative source for the French Republican Calendar.
var SEXTILE_YEARS = booleanArrayOf(true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false)

// Returns the number of days in the year.
// Returns an estimate if the precise value is not known.
fun getDayCount0(republicanYear0: Int): Short {
    val index = republicanYear0 + 209
    val sextile = SEXTILE_YEARS.getOrNull(index) ?: ((republicanYear0 + 2) % 4 == 0)
    return when (sextile) {
        true -> 366
        false -> 365
    }
}

const val REPUBLICAN_EPOCH_GREGORIAN_SECONDS: Long = -5594227200 // Unix timestamp for 1792-09-22
const val REPUBLICAN_SECONDS_PER_DAY: Long = 100000
const val REPUBLICAN_SECONDS_PER_MONTH: Long = 30 * REPUBLICAN_SECONDS_PER_DAY
const val GREGORIAN_SECONDS_PER_DAY: Long = 86400
const val AVERAGE_REPUBLICAN_SECONDS_PER_YEAR: Long = (4 * 365 * REPUBLICAN_SECONDS_PER_DAY + REPUBLICAN_SECONDS_PER_DAY) / 4

// Converts a unix timestamp to a republican timestamp.
fun timestampFromUnix(unixTimestamp: Long): Long {
    val gregorianSeconds = unixTimestamp - REPUBLICAN_EPOCH_GREGORIAN_SECONDS
    val republicanSeconds = gregorianSeconds * REPUBLICAN_SECONDS_PER_DAY / GREGORIAN_SECONDS_PER_DAY
    return republicanSeconds
}

// Returns the year for a given republican timestamp (positive values are shifted by 1).
// This could have been done using a binary search, but since we can get very close estimates, it's not absolutely necessary.
fun tsToYear0(ts: Long): Int {
    val estimated = (ts / AVERAGE_REPUBLICAN_SECONDS_PER_YEAR).toInt()
    if (estimated.absoluteValue > 100_000) {
        return estimated
    }

    var year0 = estimated
    while (true) {
        val yearStart = getYearStart0(year0)
        if (yearStart > ts) { // The prediction went too far after the timestamp
            year0 -= 1
            continue
        }
        if (yearStart + getDayCount0(year0) * REPUBLICAN_SECONDS_PER_DAY <= ts) { // The prediction was too short
            year0 += 1
            continue
        }
        return year0
    }
}

// Returns the year for a given republican timestamp.
fun tsToYear(ts: Long): Int {
    val year0 = tsToYear0(ts)
    return if (year0 >= 0) year0 + 1 else year0
}

// Formats a date in the republican calendar.
fun formatRepublicanDate(date: LocalDate, context: Context?): String {
    val unixTimestamp = date.toEpochDay() * GREGORIAN_SECONDS_PER_DAY
    val republicanTimestamp = timestampFromUnix(unixTimestamp)

    val year0 = tsToYear0(republicanTimestamp)
    val secondsInYear = republicanTimestamp - getYearStart0(year0)
    val month0 = (secondsInYear / REPUBLICAN_SECONDS_PER_MONTH).toInt()
    val secondsInMonth = secondsInYear % REPUBLICAN_SECONDS_PER_MONTH
    val day0 = (secondsInMonth / REPUBLICAN_SECONDS_PER_DAY).toInt()

    val year = if (year0 >= 0) year0 + 1 else year0
    val month = when (month0) {
        0 -> "Vendémiaire"
        1 -> "Brumaire"
        2 -> "Frimaire"
        3 -> "Nivôse"
        4 -> "Pluviôse"
        5 -> "Ventôse"
        6 -> "Germinal"
        7 -> "Floréal"
        8 -> "Prairial"
        9 -> "Messidor"
        10 -> "Thermidor"
        11 -> "Fructidor"
        else -> {
            val day = when (day0) { // Complementary days don't belong to any month
                0 -> context?.getString(R.string.republican_virtue_day)
                1 -> context?.getString(R.string.republican_engineering_day)
                2 -> context?.getString(R.string.republican_labor_day)
                3 -> context?.getString(R.string.republican_opinion_day)
                4 -> context?.getString(R.string.republican_rewards_day)
                5 -> context?.getString(R.string.republican_revolution_day)
                else -> "unreachable"
            }
            return "$day $year"
        }
    }
    val day = day0 + 1

    return "$day $month $year"
}
